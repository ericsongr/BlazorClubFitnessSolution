@page "/discount-coupon/add"
@page "/discount-coupon/edit/{id:int?}"

@using ClubFitnessDomain
@using ClubFitnessServices.Interfaces
@using Microsoft.AspNetCore.Components
@using Blazored.FluentValidation
@using ClubFitnessDomain.Enums
@using ClubFitnessSolution.Services
@using Radzen

@inject IDiscountCouponService DiscountCouponService
@inject IAccountService AccountService
@inject ILookupTypeItemsService LookupTypeItemsService

@inject NotificationService NotificationService
@inject NavigationManager Navigation

@inject UserAuthenticationStateProvider UserAuthenticationStateProvider


@rendermode RenderMode.InteractiveServer

<RadzenBreadCrumb>
    <RadzenBreadCrumbItem Path="/" Text="Home" />
    <RadzenBreadCrumbItem Path="/discount-coupon" Text="Discount Coupon List" />
    <RadzenBreadCrumbItem Text="Add Discount Coupon" />
</RadzenBreadCrumb>

<EditForm Model="@DiscountCoupon" OnValidSubmit="Save">
    <FluentValidationValidator />

    <div class="row">
        
        <div class="col-md-4 mb-3">
            <label for="couponCode">Coupon Code:</label>
            <InputText id="couponCode" @bind-Value="DiscountCoupon.CouponCode" class="form-control" />
            <ValidationMessage For="@(() => DiscountCoupon.CouponCode)" />
        </div>
        <div class="col-md-4 mb-3">
            <label for="name">Coupon Name:</label>
            <InputText id="name" @bind-Value="DiscountCoupon.Name" class="form-control" />
            <ValidationMessage For="@(() => DiscountCoupon.Name)" />
        </div>
        <div class="col-md-4 mb-3">
            <label for="discount">Discount:</label>
            <InputNumber id="discount" @bind-Value="DiscountCoupon.Discount" class="form-control" />
            <ValidationMessage For="@(() => DiscountCoupon.Discount)" />
        </div>
        @*  <div class="col-md-4 mb-3">
            <label for="discountType">Discount Type:</label>
            <InputNumber id="discountType" @bind-Value="DiscountCoupon.DiscountType" class="form-control" />
            <ValidationMessage For="@(() => DiscountCoupon.DiscountType)" />
        </div> *@
        <div class="col-md-4 mb-3">
            <label>Discount Type:</label>
            <RadzenDropDown @bind-Value="DiscountCoupon.DiscountType" Data="@discountTypes"
                            TextProperty="Description" ValueProperty="Id" AllowClear="true"
                            Placeholder="Select Discount Type" class="form-control" />
            <ValidationMessage For="@(() => DiscountCoupon.DiscountType)" />
        </div>
       @*  <div class="col-md-4 mb-3">
            <label for="minimumAmount">Minimum Amount:</label>
            <InputNumber id="minimumAmount" @bind-Value="DiscountCoupon.MinimumAmount" class="form-control" />
        </div> *@
        <div class="col-md-4 mb-3 mt-4">
            <label for="isActive">Is Active:</label>
            <RadzenSwitch @bind-Value="DiscountCoupon.IsActive" />
        </div>
        
        <div class="col-md-4 mb-3">
            <label for="expiryDate">Expiry Date:</label>
            <InputDate id="expiryDate" @bind-Value="DiscountCoupon.ExpiryDate" class="form-control" />
        </div>
        <div class="col-md-4 mb-3">
            <label for="accountId">Account:</label>
            <RadzenDropDown @bind-Value="DiscountCoupon.AccountId" Data="@accounts"
                            TextProperty="AccountName" ValueProperty="AccountId" AllowClear="true"
                            Placeholder="Select Account" class="form-control" />
            <ValidationMessage For="@(() => DiscountCoupon.AccountId)" />
        </div>
        @* <div class="col-md-4 mb-3">
            <label for="chargeType">Charge Type:</label>
            <InputText id="chargeType" @bind-Value="DiscountCoupon.ChargeType" class="form-control" />
        </div>
        <div class="col-md-4 mb-3">
            <label for="discountFor">Discount For:</label>
            <InputNumber id="discountFor" @bind-Value="DiscountCoupon.DiscountFor" class="form-control" />
            <ValidationMessage For="@(() => DiscountCoupon.DiscountFor)" />
        </div> 
        <div class="col-md-4 mb-3 mt-4">
            <label for="isCombineFees">Is Combine Fees:</label>
            <RadzenSwitch @bind-Value="DiscountCoupon.IsCombineFees" />
        </div>
        *@
    </div>

    <RadzenButton ButtonType="ButtonType.Submit" class="btn btn-primary" ButtonStyle="ButtonStyle.Success">Save</RadzenButton>
    <RadzenButton ButtonType="ButtonType.Button" Click="Back" class="btn btn-secondary ml-2" ButtonStyle="ButtonStyle.Info">Back</RadzenButton>
</EditForm>

@code {
    [Parameter] public int? Id { get; set; }
    public bool IsAdd => Id == null ? true : false;
    private DiscountCoupon DiscountCoupon = new DiscountCoupon();
    private IEnumerable<Account> accounts;
    private IEnumerable<LookupTypeItem> discountTypes;

    protected override async Task OnInitializedAsync()
    {
        accounts = await AccountService.GetAllAsync();
        discountTypes = await LookupTypeItemsService.GetLookupItems((int)LookupEnum.DiscountedBy);
        discountTypes = discountTypes.Where(o => o.Id != (int)DiscountedByEnum.Price); //remove price

        if (!IsAdd)
        {
            DiscountCoupon = await DiscountCouponService.GetByIdAsync(Id ?? 0);
        }
    }

    private async Task Save()
    {
        try
        {
            if (IsAdd)
            {
                DiscountCoupon.CreatedBy = await UserAuthenticationStateProvider.GetStaffId();
                await DiscountCouponService.AddAsync(DiscountCoupon);
                NotificationService.Notify(NotificationSeverity.Success, "Success", "Discount Coupon added successfully.");
                Notify("Discount Coupon added successfully.");
            }
            else
            {
                DiscountCoupon.UpdatedBy = await UserAuthenticationStateProvider.GetStaffId();
                DiscountCoupon.UpdatedDateTimeUtc = DateTime.UtcNow;
                await DiscountCouponService.UpdateAsync(DiscountCoupon);
                Notify("Discount Coupon updated successfully.");
            }

            Navigation.NavigateTo("/discount-coupon");
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    private void Notify(string message)
    {
        NotificationService.Notify(NotificationSeverity.Success, "Success", message);
    }

    private void Back()
    {
        Navigation.NavigateTo("/discount-coupon");
    }
}
