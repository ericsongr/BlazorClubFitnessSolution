@page "/account-product-subcategory/add"
@page "/account-product-subcategory/edit/{id:int?}"

@using ClubFitnessServices.Interfaces
@using ClubFitnessDomain
@using ClubFitnessDomain.Dtos
@using Microsoft.AspNetCore.Components
@using Blazored.FluentValidation
@using ClubFitnessSolution.Services
@using ClubFitnessSolution.Services.Constants

@inject IAccountProductSubCategoryService AccountProductSubCategoryService
@inject IAccountService AccountService
@inject IAccountProductCategoryService AccountProductCategoryService
@inject NotificationService NotificationService
@inject NavigationManager Navigation
@inject UserAuthenticationStateProvider UserAuthenticationStateProvider
@inject ImageService ImageService

@rendermode RenderMode.InteractiveServer

<EditForm Model="@AccountProductSubCategory" OnValidSubmit="Save">
    <FluentValidationValidator />
    
    <div class="mb-3">
        <label for="accountId">Account:</label>
        <RadzenDropDown @bind-Value="AccountProductSubCategory.AccountId" Data="@accounts"
                        TextProperty="AccountName" ValueProperty="AccountId" AllowClear="true"
                        Placeholder="Select Account" class="form-control" />
        <ValidationMessage For="@(() => AccountProductSubCategory.AccountId)" />
    </div>

    <div class="mb-3">
        <label for="accountProductCategoryId">Product Category:</label>
        <RadzenDropDown @bind-Value="AccountProductSubCategory.AccountProductCategoryId" Data="@productCategories"
                        TextProperty="ProductCategoryName" ValueProperty="AccountProductCategoryId" AllowClear="true"
                        Placeholder="Select Product Category" class="form-control" />
        <ValidationMessage For="@(() => AccountProductSubCategory.AccountProductCategoryId)" />
    </div>

    <div class="mb-3">
        <label for="productSubCategoryName">Product Sub-Category Name:</label>
        <InputText id="productSubCategoryName" @bind-Value="AccountProductSubCategory.ProductSubCategoryName" class="form-control" />
        <ValidationMessage For="@(() => AccountProductSubCategory.ProductSubCategoryName)" />
    </div>

    <div class="mb-3">
        <label for="shortDescription">Short Description:</label>
        <InputText id="shortDescription" @bind-Value="AccountProductSubCategory.ShortDescription" class="form-control" />
    </div>

    <div class="mb-3">
        <label for="isActive">Is Active:</label>
        <RadzenSwitch @bind-Value="AccountProductSubCategory.IsActive" />
    </div>
    
    <div class="mb-3">
        <label for="displayImagePath">Display Image:</label>
        <InputFile OnChange="@UploadImage" />
    </div>

    @if (!string.IsNullOrEmpty(uploadedImagePath))
    {
        <div class="mb-3">
            <label for="uploadedImage">Uploaded Image:</label>
            <br/>
            <img src="@uploadedImagePath" alt="Uploaded image" style="max-width: 200px; max-height: 200px;" />
        </div>
    }

    <RadzenButton ButtonType="ButtonType.Submit" class="btn btn-primary" ButtonStyle="ButtonStyle.Success">Save</RadzenButton>
    <RadzenButton ButtonType="ButtonType.Button" Click="Back" class="btn btn-secondary ml-2"
                  ButtonStyle="ButtonStyle.Info">Back</RadzenButton>
</EditForm>

@code {
    [Parameter] public int? Id { get; set; }
    public bool IsAdd => Id == null ? true : false;
    private AccountProductSubCategoryDto AccountProductSubCategory = new AccountProductSubCategoryDto();
    private IEnumerable<Account> accounts;
    private IEnumerable<AccountProductCategory> productCategories;

    private string uploadedImagePath = string.Empty;
    protected override async Task OnInitializedAsync()
    {
        accounts = await AccountService.GetAllAsync();
        productCategories = await AccountProductCategoryService.GetAllAsync();

        if (!IsAdd)
        {
            AccountProductSubCategory = await AccountProductSubCategoryService.GetByIdAsync(Id ?? 0);
            if (AccountProductSubCategory.DisplayImagePath != null)
                uploadedImagePath = ImageService.GetImage(AccountProductSubCategory.DisplayImagePath, FolderConstant.SubCategories);
        }
    }

    private async Task Save()
    {
        try
        {
            if (IsAdd)
            {
                AccountProductSubCategory.CreatedBy = await UserAuthenticationStateProvider.GetStaffId();
                await AccountProductSubCategoryService.AddAsync(AccountProductSubCategory);
                Notify("Product Sub-Category added successfully.");
            }
            else
            {
                AccountProductSubCategory.UpdatedBy = await UserAuthenticationStateProvider.GetStaffId();
                AccountProductSubCategory.UpdatedDateTimeUtc = DateTime.UtcNow;
                await AccountProductSubCategoryService.UpdateAsync(AccountProductSubCategory);
                Notify("Product Sub-Category updated successfully.");
            }

            Navigation.NavigateTo("/account-product-subcategory");
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    private void Notify(string message)
    {
        NotificationService.Notify(NotificationSeverity.Success, "Success", message);
    }

    private async Task UploadImage(InputFileChangeEventArgs e)
    {
        try
        {
            AccountProductSubCategory.DisplayImagePath = await ImageService.UploadImageAsync(e.File, FolderConstant.SubCategories);
            uploadedImagePath = ImageService.GetImage(AccountProductSubCategory.DisplayImagePath, FolderConstant.SubCategories);
                
            NotificationService.Notify(NotificationSeverity.Success, "Success", "Image uploaded successfully.");
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            NotificationService.Notify(NotificationSeverity.Error, "Error", "Image upload failed.");
        }
    }

    private void Back()
    {
        Navigation.NavigateTo("/account-product-subcategory");
    }
}
