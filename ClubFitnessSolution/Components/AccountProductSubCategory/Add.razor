@page "/account-product-subcategory/add"

@using ClubFitnessServices.Interfaces
@using ClubFitnessDomain
@using ClubFitnessDomain.Dtos
@using Microsoft.AspNetCore.Components
@using Blazored.FluentValidation

@inject IAccountProductSubCategoryService AccountProductSubCategoryService
@inject IAccountService AccountService
@inject IAccountProductCategoryService AccountProductCategoryService
@inject NotificationService NotificationService
@inject NavigationManager Navigation
@inject UserAuthenticationStateProvider UserAuthenticationStateProvider

@rendermode RenderMode.InteractiveServer

<EditForm Model="@AccountProductSubCategory" OnValidSubmit="AddAccountProductSubCategory">
    <FluentValidationValidator />
    
    <div class="mb-3">
        <label for="accountId">Account:</label>
        <RadzenDropDown @bind-Value="AccountProductSubCategory.AccountId" Data="@accounts"
                        TextProperty="AccountName" ValueProperty="AccountId" AllowClear="true"
                        Placeholder="Select Account" class="form-control" />
        <ValidationMessage For="@(() => AccountProductSubCategory.AccountId)" />
    </div>

    <div class="mb-3">
        <label for="accountProductCategoryId">Product Category:</label>
        <RadzenDropDown @bind-Value="AccountProductSubCategory.AccountProductCategoryId" Data="@productCategories"
                        TextProperty="ProductCategoryName" ValueProperty="AccountProductCategoryId" AllowClear="true"
                        Placeholder="Select Product Category" class="form-control" />
        <ValidationMessage For="@(() => AccountProductSubCategory.AccountProductCategoryId)" />
    </div>

    <div class="mb-3">
        <label for="productSubCategoryName">Product Sub-Category Name:</label>
        <InputText id="productSubCategoryName" @bind-Value="AccountProductSubCategory.ProductSubCategoryName" class="form-control" />
        <ValidationMessage For="@(() => AccountProductSubCategory.ProductSubCategoryName)" />
    </div>

    <div class="mb-3">
        <label for="shortDescription">Short Description:</label>
        <InputText id="shortDescription" @bind-Value="AccountProductSubCategory.ShortDescription" class="form-control" />
    </div>

    <div class="mb-3">
        <label for="isActive">Is Active:</label>
        <RadzenSwitch @bind-Value="AccountProductSubCategory.IsActive" />
    </div>

    <RadzenButton ButtonType="ButtonType.Submit" class="btn btn-primary" ButtonStyle="ButtonStyle.Success">Add Product Sub-Category</RadzenButton>
    <RadzenButton ButtonType="ButtonType.Button" Click="Back" class="btn btn-secondary ml-2"
                  ButtonStyle="ButtonStyle.Info">Back</RadzenButton>
</EditForm>

@code {
    private AccountProductSubCategoryDto AccountProductSubCategory = new AccountProductSubCategoryDto();
    private IEnumerable<Account> accounts;
    private IEnumerable<AccountProductCategory> productCategories;

    protected override async Task OnInitializedAsync()
    {
        accounts = await AccountService.GetAllAsync();
        productCategories = await AccountProductCategoryService.GetAllAsync();
    }

    private async Task AddAccountProductSubCategory()
    {
        try
        {
            AccountProductSubCategory.CreatedBy = UserAuthenticationStateProvider.GetStaffId();
            await AccountProductSubCategoryService.AddAsync(AccountProductSubCategory);
            NotificationService.Notify(NotificationSeverity.Success, "Success", "Product Sub-Category added successfully.");
            Navigation.NavigateTo("/account-product-subcategory");
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    private void Back()
    {
        Navigation.NavigateTo("/account-product-subcategory");
    }
}
