@page "/account-product-category"
@using ClubFitnessServices.Interfaces
@using ClubFitnessDomain

@inject NavigationManager Navigation
@inject DialogService DialogService
@inject NotificationService NotificationService
@inject IAccountProductCategoryService AccountProductCategoryService

@rendermode RenderMode.InteractiveServer

<RadzenBreadCrumb>
    <RadzenBreadCrumbItem Path="/" Text="Home" />
    <RadzenBreadCrumbItem Path="/account-product-category" Text="Product Category List" />
</RadzenBreadCrumb>

<div class="p-lg-1 p-md-3 p-sm-2">
    <h1 class="fw-bold">Product Category List</h1>

    <RadzenButton Click="@(args => Navigation.NavigateTo("/account-product-category/add"))"
                  Style="margin-top: 20px; margin-bottom: 10px;"
                  ButtonStyle="ButtonStyle.Success">Create New Product Category</RadzenButton>

    <div class="card p-1 shadow">
        @if (accountProductCategories == null)
        {
            <h1 class="alert alert-danger">No product categories found!</h1>
        }
        else
        {
            <RadzenDataGrid AllowFiltering="true"
                            AllowColumnResize="true"
                            AllowAlternatingRows="false"
                            AllowSorting="true"
                            PageSize="20"
                            AllowPaging="true"
                            PagerHorizontalAlign="HorizontalAlign.Left"
                            ShowPagingSummary="true"
                            Data="@accountProductCategories"
                            TItem="AccountProductCategory"
                            LogicalFilterOperator="LogicalFilterOperator.Or"
                            SelectionMode="DataGridSelectionMode.Single">

                <Columns>
                    <RadzenDataGridColumn TItem="AccountProductCategory" Property="ProductCategoryName" Filterable="true" Title="Category Name" TextAlign="TextAlign.Center" />
                    <RadzenDataGridColumn TItem="AccountProductCategory" Property="ShortDescription" Filterable="true" Title="Description" />
                    <RadzenDataGridColumn TItem="AccountProductCategory" Title="Is Active" Filterable="false">
                        <Template Context="data">
                            @if (data.IsActive)
                            {
                                <span>Yes</span>
                            }
                            else
                            {
                                <span>No</span>
                            }
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="AccountProductCategory" Title="POS Category" Filterable="false">
                        <Template Context="data">
                            @if (data.IsPosCategory)
                            {
                                <span>Yes</span>
                            }
                            else
                            {
                                <span>No</span>
                            }
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="AccountProductCategory" Title="Actions" Filterable="false">
                        <Template Context="data">
                            <RadzenButton Click="@(args => Navigation.NavigateTo($"/account-product-category/edit/{data.AccountProductCategoryId}"))" ButtonStyle="ButtonStyle.Success">Edit</RadzenButton>
                            <RadzenButton Click="@(args => Delete(data))" Style="margin-left: 10px;" ButtonStyle="ButtonStyle.Danger">Delete</RadzenButton>
                        </Template>
                    </RadzenDataGridColumn>
                </Columns>
            </RadzenDataGrid>

        }
    </div>
</div>

@code {
    IEnumerable<AccountProductCategory> accountProductCategories;

    protected override async Task OnInitializedAsync()
    {
        accountProductCategories = await GetAllAccountProductCategoriesForGrid();
    }

    private async Task<IEnumerable<AccountProductCategory>> GetAllAccountProductCategoriesForGrid()
    {
        return await AccountProductCategoryService.GetAllAsync();
    }

    private async void Delete(AccountProductCategory accountProductCategory)
    {
        bool? confirmed = await DialogService.Confirm("Are you sure you want to delete this product category?", "Delete Product Category");

        if (confirmed == true)
        {
            await AccountProductCategoryService.DeleteAsync(accountProductCategory.AccountProductCategoryId, 90003); //TODO: 99999 to supply from StaffId of Staff table

            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Success",
                    Detail = "Product Category has been deleted.",
                    Duration = 4000
                });

            await RefreshProductCategories();
        }
    }

    private async Task RefreshProductCategories()
    {
        accountProductCategories = await GetAllAccountProductCategoriesForGrid();
        StateHasChanged(); // notify Blazor UI updates
    }

}
