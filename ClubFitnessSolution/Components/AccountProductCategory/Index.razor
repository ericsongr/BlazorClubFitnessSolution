@page "/account-product-category"
@using ClubFitnessServices.Interfaces
@using ClubFitnessDomain
@using ClubFitnessSolution.Components.Shared

@inject NavigationManager Navigation
@inject DialogService DialogService
@inject NotificationService NotificationService
@inject IAccountProductCategoryService AccountProductCategoryService
@inject UserAuthenticationStateProvider UserAuthenticationStateProvider

@inherits BasePage

@rendermode RenderMode.InteractiveServer

<RadzenBreadCrumb>
    <RadzenBreadCrumbItem Path="/" Text="Home" />
    <RadzenBreadCrumbItem Path="/account-product-category" Text="Product Category List" />
</RadzenBreadCrumb>

@if (IsLoading)
{
    <LoadingSpinner />    
}
else {
    <div class="p-lg-1 p-md-3 p-sm-2">
    <h1 class="fw-bold">Product Category List</h1>

    <RadzenButton Click="@(args => Navigation.NavigateTo("/account-product-category/add"))"
                  Style="margin-top: 20px; margin-bottom: 10px;"
                  ButtonStyle="ButtonStyle.Success">Create New Product Category</RadzenButton>

    <div class="card p-1 shadow">
        @if (accountProductCategories == null || !accountProductCategories.Any())
        {
            <h1 class="alert alert-danger">No product categories found!</h1>
        }
        else
        {
            <RadzenDataGrid AllowFiltering="true"
                            AllowColumnResize="true"
                            AllowAlternatingRows="false"
                            AllowSorting="true"
                            PageSize="20"
                            AllowPaging="true"
                            PagerHorizontalAlign="HorizontalAlign.Left"
                            ShowPagingSummary="true"
                            Data="@accountProductCategories"
                            TItem="AccountProductCategory"
                            LogicalFilterOperator="LogicalFilterOperator.Or"
                            SelectionMode="DataGridSelectionMode.Single">

                <Columns>
                    <RadzenDataGridColumn TItem="AccountProductCategory" Property="DisplayImagePath" Filterable="true" Title="Image" TextAlign="TextAlign.Center">
                        <Template Context="data">
                            <img src="@(data.DisplayImagePath == null ? "/uploads/no-image.png" : $"/uploads/Categories/{data.DisplayImagePath}")"
                                 alt="Uploaded image" style="max-width: 100px; max-height: 100px;" />
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="AccountProductCategory" Property="ProductCategoryName" Filterable="true" Title="Category Name" TextAlign="TextAlign.Center" />
                    <RadzenDataGridColumn TItem="AccountProductCategory" Property="ShortDescription" Filterable="true" Title="Description" />
                    <RadzenDataGridColumn TItem="AccountProductCategory" Title="Is Active" Filterable="false">
                        <Template Context="data">
                            @if (data.IsActive)
                            {
                                <span>Yes</span>
                            }
                            else
                            {
                                <span>No</span>
                            }
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="AccountProductCategory" Title="POS Category" Filterable="false">
                        <Template Context="data">
                            @if (data.IsPosCategory)
                            {
                                <span>Yes</span>
                            }
                            else
                            {
                                <span>No</span>
                            }
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="AccountProductCategory" Title="Actions" Filterable="false">
                        <Template Context="data">
                            <RadzenButton Click="@(args => Navigation.NavigateTo($"/account-product-category/edit/{data.AccountProductCategoryId}"))" ButtonStyle="ButtonStyle.Success">Edit</RadzenButton>
                            <RadzenButton Click="@(args => Delete(data))" Style="margin-left: 10px;" ButtonStyle="ButtonStyle.Danger">Delete</RadzenButton>
                        </Template>
                    </RadzenDataGridColumn>
                </Columns>
            </RadzenDataGrid>

        }
    </div>
</div>
}

@code {
    IEnumerable<AccountProductCategory> accountProductCategories;

    protected override async Task LoadDataAsync()
    {
        accountProductCategories = await GetAllAccountProductCategoriesForGrid();
    }

    private async Task<IEnumerable<AccountProductCategory>> GetAllAccountProductCategoriesForGrid()
    {
        return await AccountProductCategoryService.GetAllAsync();
    }

    private async void Delete(AccountProductCategory accountProductCategory)
    {
        await MarkAsDeleted(accountProductCategory.AccountProductCategoryId, "product category",
            async (id) => await AccountProductCategoryService.DeleteAsync(id, await UserAuthenticationStateProvider.GetStaffId()));
        await RefreshProductCategories();
    }

    private async Task RefreshProductCategories()
    {
        accountProductCategories = await GetAllAccountProductCategoriesForGrid();
        StateHasChanged(); // notify Blazor UI updates
    }

}
