@page "/account-product-category/add"

@using ClubFitnessDomain
@using ClubFitnessDomain.Dtos
@using ClubFitnessServices.Interfaces
@using Microsoft.AspNetCore.Components
@using Blazored.FluentValidation
@using System.IO
@using Microsoft.AspNetCore.Components.Forms
@using SixLabors.ImageSharp
@using SixLabors.ImageSharp.Processing

@inject IAccountProductCategoryService AccountProductCategoryService
@inject IAccountService AccountService
@inject NotificationService NotificationService
@inject NavigationManager Navigation
@inject UserAuthenticationStateProvider UserAuthenticationStateProvider
@inject IWebHostEnvironment env

@rendermode RenderMode.InteractiveServer

<RadzenBreadCrumb>
    <RadzenBreadCrumbItem Path="/" Text="Home" />
    <RadzenBreadCrumbItem Path="/account-product-category" Text="Product Category List" />
    <RadzenBreadCrumbItem Text="Create New Product Category" />
</RadzenBreadCrumb>

<EditForm Model="@AccountProductCategory" OnValidSubmit="AddProductCategory" class="mt-5">
    <FluentValidationValidator />

    <div class="mb-3">
        <label for="accountId">Account:</label>
        <RadzenDropDown @bind-Value="AccountProductCategory.AccountId" Data="@accounts"
                        TextProperty="AccountName" ValueProperty="AccountId" AllowClear="true"
                        Placeholder="Select Account" class="form-control" />
        <ValidationMessage For="@(() => AccountProductCategory.AccountId)" />
    </div>

    <div class="mb-3">
        <label for="productCategoryName">Product Category Name:</label>
        <InputText id="productCategoryName" @bind-Value="AccountProductCategory.ProductCategoryName" class="form-control" />
        <ValidationMessage For="@(() => AccountProductCategory.ProductCategoryName)" />
    </div>

    <div class="mb-3">
        <label for="shortDescription">Short Description:</label>
        <InputText id="shortDescription" @bind-Value="AccountProductCategory.ShortDescription" class="form-control" />
        <ValidationMessage For="@(() => AccountProductCategory.ShortDescription)" />
    </div>

    <div class="mb-3">
        <label for="isActive">Is Active:</label>
        <RadzenSwitch @bind-Value="AccountProductCategory.IsActive" />
    </div>

    <div class="mb-3">
        <label for="isPosCategory">Is POS Category:</label>
        <RadzenSwitch @bind-Value="AccountProductCategory.IsPosCategory" />
    </div>

    <div class="mb-3">
        <label for="displayImagePath">Display Image:</label>
        <InputFile OnChange="@UploadImage" />
    </div>

    <RadzenButton ButtonType="ButtonType.Submit" class="btn btn-primary"
                  ButtonStyle="ButtonStyle.Success">Add Product Category</RadzenButton>
    <RadzenButton ButtonType="ButtonType.Button" Click="Back" class="btn btn-secondary ml-2"
                  ButtonStyle="ButtonStyle.Info">Back</RadzenButton>
</EditForm>

@code {
    private AccountProductCategoryDto AccountProductCategory = new AccountProductCategoryDto();
    private IEnumerable<Account> accounts;

    // Temporary path for uploaded image
    private string uploadedImagePath;

    protected override async Task OnInitializedAsync()
    {
        accounts = await AccountService.GetAllAsync();
    }

    private async Task AddProductCategory()
    {
        try
        {
            // Save the image path if uploaded
            AccountProductCategory.DisplayImagePath = uploadedImagePath;
            AccountProductCategory.CreatedBy = UserAuthenticationStateProvider.GetStaffId();
            await AccountProductCategoryService.AddAsync(AccountProductCategory);
            NotificationService.Notify(NotificationSeverity.Success, "Success", "Product category added successfully.");
            Navigation.NavigateTo("/account-product-category");
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    private async Task UploadImage(InputFileChangeEventArgs e)
    {
        try
        {
            // Get the uploaded file
            IBrowserFile file = e.File;

            // Define the upload folder path
            var uploadsFolder = Path.Combine(env.WebRootPath, "uploads");

            // Ensure the directory exists
            if (!Directory.Exists(uploadsFolder))
            {
                Directory.CreateDirectory(uploadsFolder);
            }

            // Create a unique file name
            var fileName = $"{Guid.NewGuid()}_{file.Name}";
            var filePath = Path.Combine(uploadsFolder, fileName);

            // Read the file into a memory stream
            using (var memoryStream = new MemoryStream())
            {
                await file.OpenReadStream().CopyToAsync(memoryStream);
                memoryStream.Position = 0; // Reset the position to the beginning of the stream

                // Load the image from the memory stream using ImageSharp
                using (var image = SixLabors.ImageSharp.Image.Load(memoryStream))
                {
                    // Resize the image to a thumbnail size (e.g., 150x150)
                    image.Mutate(x => x.Resize(new ResizeOptions
                        {
                            Size = new SixLabors.ImageSharp.Size(150, 150),
                            Mode = SixLabors.ImageSharp.Processing.ResizeMode.Crop // Use crop to maintain aspect ratio
                        }));

                    // Save the resized image
                    await using (var fileStream = new FileStream(filePath, FileMode.Create))
                    {
                        await image.SaveAsJpegAsync(fileStream); // Save as JPEG
                    }
                }
            }

            // Set the uploaded image path (relative path to store in the database)
            uploadedImagePath = $"{fileName}";

            // Notify the user about the successful upload
            NotificationService.Notify(NotificationSeverity.Success, "Success", "Thumbnail created and image uploaded successfully.");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Image upload failed: {ex.Message}");
            NotificationService.Notify(NotificationSeverity.Error, "Error", "Image upload failed.");
        }
    }


    private void Back()
    {
        Navigation.NavigateTo("/account-product-category");
    }
}
